import { concat, encodeAbiParameters, keccak256, pad, toHex } from "viem";
import { getEntryPointVersion } from "./getEntryPointVersion.js";
function packUserOp({ userOperation, entryPoint: entryPointAddress }) {
    const entryPointVersion = getEntryPointVersion(entryPointAddress);
    if (entryPointVersion === "v0.6") {
        const userOperationVersion0_6 = userOperation;
        const hashedInitCode = keccak256(userOperationVersion0_6.initCode);
        const hashedCallData = keccak256(userOperationVersion0_6.callData);
        const hashedPaymasterAndData = keccak256(userOperationVersion0_6.paymasterAndData);
        return encodeAbiParameters([
            { type: "address" },
            { type: "uint256" },
            { type: "bytes32" },
            { type: "bytes32" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "bytes32" }
        ], [
            userOperationVersion0_6.sender,
            userOperationVersion0_6.nonce,
            hashedInitCode,
            hashedCallData,
            userOperationVersion0_6.callGasLimit,
            userOperationVersion0_6.verificationGasLimit,
            userOperationVersion0_6.preVerificationGas,
            userOperationVersion0_6.maxFeePerGas,
            userOperationVersion0_6.maxPriorityFeePerGas,
            hashedPaymasterAndData
        ]);
    }
    const userOperationVersion0_7 = userOperation;
    const hashedInitCode = keccak256(userOperationVersion0_7.factory && userOperationVersion0_7.factoryData
        ? concat([
            userOperationVersion0_7.factory,
            userOperationVersion0_7.factoryData
        ])
        : "0x");
    const hashedCallData = keccak256(userOperationVersion0_7.callData);
    const hashedPaymasterAndData = keccak256(userOperationVersion0_7.paymaster &&
        userOperationVersion0_7.paymasterVerificationGasLimit &&
        userOperationVersion0_7.paymasterPostOpGasLimit &&
        userOperationVersion0_7.paymasterData
        ? concat([
            userOperationVersion0_7.paymaster,
            pad(toHex(userOperationVersion0_7.paymasterVerificationGasLimit), {
                size: 16
            }),
            pad(toHex(userOperationVersion0_7.paymasterPostOpGasLimit), {
                size: 16
            }),
            userOperationVersion0_7.paymasterData
        ])
        : "0x");
    return encodeAbiParameters([
        { type: "address" },
        { type: "uint256" },
        { type: "bytes32" },
        { type: "bytes32" },
        { type: "bytes32" },
        { type: "uint256" },
        { type: "bytes32" },
        { type: "bytes32" }
    ], [
        userOperationVersion0_7.sender,
        userOperationVersion0_7.nonce,
        hashedInitCode,
        hashedCallData,
        concat([
            pad(toHex(userOperationVersion0_7.verificationGasLimit), {
                size: 16
            }),
            pad(toHex(userOperationVersion0_7.callGasLimit), { size: 16 })
        ]),
        userOperationVersion0_7.preVerificationGas,
        concat([
            pad(toHex(userOperationVersion0_7.maxPriorityFeePerGas), {
                size: 16
            }),
            pad(toHex(userOperationVersion0_7.maxFeePerGas), { size: 16 })
        ]),
        hashedPaymasterAndData
    ]);
}
/**
 *
 * Returns user operation hash that is a unique identifier of the user operation.
 *
 * - Docs: https://docs.pimlico.io/permissionless/reference/utils/getUserOperationHash
 *
 * @param args: userOperation, entryPoint, chainId as {@link GetUserOperationHashParams}
 * @returns userOperationHash as {@link Hash}
 *
 * @example
 * import { getUserOperationHash } from "permissionless/utils"
 *
 * const userOperationHash = getUserOperationHash({
 *      userOperation,
 *      entryPoint,
 *      chainId
 * })
 *
 * // Returns "0xe9fad2cd67f9ca1d0b7a6513b2a42066784c8df938518da2b51bb8cc9a89ea34"
 *
 */
export const getUserOperationHash = ({ userOperation, entryPoint: entryPointAddress, chainId }) => {
    const encoded = encodeAbiParameters([{ type: "bytes32" }, { type: "address" }, { type: "uint256" }], [
        keccak256(packUserOp({
            userOperation,
            entryPoint: entryPointAddress
        })),
        entryPointAddress,
        BigInt(chainId)
    ]);
    return keccak256(encoded);
};
//# sourceMappingURL=getUserOperationHash.js.map