"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserOperationHash = void 0;
const viem_1 = require("viem");
const getEntryPointVersion_1 = require("./getEntryPointVersion.js");
function packUserOp({ userOperation, entryPoint: entryPointAddress }) {
    const entryPointVersion = (0, getEntryPointVersion_1.getEntryPointVersion)(entryPointAddress);
    if (entryPointVersion === "v0.6") {
        const userOperationVersion0_6 = userOperation;
        const hashedInitCode = (0, viem_1.keccak256)(userOperationVersion0_6.initCode);
        const hashedCallData = (0, viem_1.keccak256)(userOperationVersion0_6.callData);
        const hashedPaymasterAndData = (0, viem_1.keccak256)(userOperationVersion0_6.paymasterAndData);
        return (0, viem_1.encodeAbiParameters)([
            { type: "address" },
            { type: "uint256" },
            { type: "bytes32" },
            { type: "bytes32" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "uint256" },
            { type: "bytes32" }
        ], [
            userOperationVersion0_6.sender,
            userOperationVersion0_6.nonce,
            hashedInitCode,
            hashedCallData,
            userOperationVersion0_6.callGasLimit,
            userOperationVersion0_6.verificationGasLimit,
            userOperationVersion0_6.preVerificationGas,
            userOperationVersion0_6.maxFeePerGas,
            userOperationVersion0_6.maxPriorityFeePerGas,
            hashedPaymasterAndData
        ]);
    }
    const userOperationVersion0_7 = userOperation;
    const hashedInitCode = (0, viem_1.keccak256)(userOperationVersion0_7.factory && userOperationVersion0_7.factoryData
        ? (0, viem_1.concat)([
            userOperationVersion0_7.factory,
            userOperationVersion0_7.factoryData
        ])
        : "0x");
    const hashedCallData = (0, viem_1.keccak256)(userOperationVersion0_7.callData);
    const hashedPaymasterAndData = (0, viem_1.keccak256)(userOperationVersion0_7.paymaster &&
        userOperationVersion0_7.paymasterVerificationGasLimit &&
        userOperationVersion0_7.paymasterPostOpGasLimit &&
        userOperationVersion0_7.paymasterData
        ? (0, viem_1.concat)([
            userOperationVersion0_7.paymaster,
            (0, viem_1.pad)((0, viem_1.toHex)(userOperationVersion0_7.paymasterVerificationGasLimit), {
                size: 16
            }),
            (0, viem_1.pad)((0, viem_1.toHex)(userOperationVersion0_7.paymasterPostOpGasLimit), {
                size: 16
            }),
            userOperationVersion0_7.paymasterData
        ])
        : "0x");
    return (0, viem_1.encodeAbiParameters)([
        { type: "address" },
        { type: "uint256" },
        { type: "bytes32" },
        { type: "bytes32" },
        { type: "bytes32" },
        { type: "uint256" },
        { type: "bytes32" },
        { type: "bytes32" }
    ], [
        userOperationVersion0_7.sender,
        userOperationVersion0_7.nonce,
        hashedInitCode,
        hashedCallData,
        (0, viem_1.concat)([
            (0, viem_1.pad)((0, viem_1.toHex)(userOperationVersion0_7.verificationGasLimit), {
                size: 16
            }),
            (0, viem_1.pad)((0, viem_1.toHex)(userOperationVersion0_7.callGasLimit), { size: 16 })
        ]),
        userOperationVersion0_7.preVerificationGas,
        (0, viem_1.concat)([
            (0, viem_1.pad)((0, viem_1.toHex)(userOperationVersion0_7.maxPriorityFeePerGas), {
                size: 16
            }),
            (0, viem_1.pad)((0, viem_1.toHex)(userOperationVersion0_7.maxFeePerGas), { size: 16 })
        ]),
        hashedPaymasterAndData
    ]);
}
const getUserOperationHash = ({ userOperation, entryPoint: entryPointAddress, chainId }) => {
    const encoded = (0, viem_1.encodeAbiParameters)([{ type: "bytes32" }, { type: "address" }, { type: "uint256" }], [
        (0, viem_1.keccak256)(packUserOp({
            userOperation,
            entryPoint: entryPointAddress
        })),
        entryPointAddress,
        BigInt(chainId)
    ]);
    return (0, viem_1.keccak256)(encoded);
};
exports.getUserOperationHash = getUserOperationHash;
//# sourceMappingURL=getUserOperationHash.js.map